package com.axamit.aop.osgi.weaver;

import com.axamit.aop.osgi.weaver.utils.BundleUtils;
import com.axamit.aop.osgi.weaver.utils.CompositeClassLoader;
import org.aspectj.weaver.bcel.ExtensibleURLClassLoader;
import org.aspectj.weaver.tools.WeavingClassLoader;
import org.osgi.framework.Bundle;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.net.URL;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OsgiWeavingClassLoader extends ExtensibleURLClassLoader implements WeavingClassLoader {

    private static final Logger LOGGER = LoggerFactory.getLogger(OsgiWeavingClassLoader.class);

    private Bundle bundle;

    private List<Bundle> aspectBundles;

    private List<URL> aspectURLs;

    private List<URL> classURLs;

    private Map<String, byte[]> generatedClasses = new HashMap<>();

    public OsgiWeavingClassLoader(List<URL> classURLs, List<URL> aspectURLs,
                                  Bundle bundle, List<Bundle> aspectBundles) {
        super(  classURLs.toArray( new URL[classURLs.size()] ),
                new CompositeClassLoader()
                        .add(BundleUtils.getBundleClassLoader(bundle))
                        .addAll(BundleUtils.getBundleClassLoaders(aspectBundles)));
            // was bundle.adapt(BundleWiring.class).getClassLoader()
        this.bundle = bundle;
        this.classURLs = new ArrayList<>( classURLs );
        this.aspectURLs = new ArrayList<>( aspectURLs );
    }

    public Bundle getBundle() {
        return bundle;
    }

    @Override
    public URL[] getAspectURLs() {
        return aspectURLs.toArray( new URL[aspectURLs.size()] );
    }

    /** Map of classes processed during AspectJ weaving */
    public Map<String, byte[]> getGeneratedClasses() {
        return generatedClasses;
    }

    public void acceptClass (String name, byte[] classBytes, byte[] weavedBytes) {
        generatedClasses.put(name, weavedBytes);
    }

    /**
     * Override to find classes generated by WeavingAdaptor
     */
    protected byte[] getBytes(String name) throws IOException {
        byte[] bytes = super.getBytes(name);

        if (bytes == null) {
            return generatedClasses.remove(name);
        }

        return bytes;
    }

    @Override
    protected Class findClass(String name) throws ClassNotFoundException {
        return getParent().loadClass(name);
    }

}
